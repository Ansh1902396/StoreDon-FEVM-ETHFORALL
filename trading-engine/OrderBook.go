// Code generated - DO NOT EDIT.
// This file is a generated binding and any manual changes will be lost.

package Orderbook

import (
	"errors"
	"math/big"
	"strings"

	ethereum "github.com/ethereum/go-ethereum"
	"github.com/ethereum/go-ethereum/accounts/abi"
	"github.com/ethereum/go-ethereum/accounts/abi/bind"
	"github.com/ethereum/go-ethereum/common"
	"github.com/ethereum/go-ethereum/core/types"
	"github.com/ethereum/go-ethereum/event"
)

// Reference imports to suppress errors if they are not otherwise used.
var (
	_ = errors.New
	_ = big.NewInt
	_ = strings.NewReader
	_ = ethereum.NotFound
	_ = bind.Bind
	_ = common.Big1
	_ = types.BloomLookup
	_ = event.NewSubscription
)

// OrderbookMetaData contains all meta data concerning the Orderbook contract.
var OrderbookMetaData = &bind.MetaData{
	ABI: "[{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"_oracles\",\"type\":\"address[]\"},{\"internalType\":\"string[]\",\"name\":\"_oraclesIP\",\"type\":\"string[]\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"askId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"asker\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"askAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"askSize\",\"type\":\"uint256\"}],\"name\":\"NewAskEvent\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"bidId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"bidder\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"bidAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"bidSize\",\"type\":\"uint256\"}],\"name\":\"NewBidEvent\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"string\",\"name\":\"orderId\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"bidId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"bidder\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"askId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"asker\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"oracleAddress\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"dataCID\",\"type\":\"string\"}],\"name\":\"orderCreatedEvent\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"_target\",\"type\":\"bytes\"},{\"internalType\":\"uint256\",\"name\":\"_askAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_askSize\",\"type\":\"uint256\"}],\"name\":\"addAsk\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_oracleAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_bidAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_bidSize\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"_dataCID\",\"type\":\"string\"}],\"name\":\"addBid\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_SPAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_askAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_askSize\",\"type\":\"uint256\"}],\"name\":\"addDemoAsks\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_orderId\",\"type\":\"string\"},{\"internalType\":\"uint64\",\"name\":\"_actorId\",\"type\":\"uint64\"}],\"name\":\"askBounty\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getOracles\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"\",\"type\":\"address[]\"},{\"internalType\":\"string[]\",\"name\":\"\",\"type\":\"string[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_orderId\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"_bidId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_askId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_amountFixed\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_sizeFixed\",\"type\":\"uint256\"}],\"name\":\"proveOrder\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_oracle\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"_oracleIP\",\"type\":\"string\"}],\"name\":\"registerOracle\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]",
	Bin: "0x6080604052600060065560006007553480156200001b57600080fd5b506040516200408b3803806200408b833981810160405281019062000041919062000602565b33600360006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555081600490805190602001906200009a929190620000bc565b508060059080519060200190620000b39291906200014b565b505050620009b9565b82805482825590600052602060002090810192821562000138579160200282015b82811115620001375782518260006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555091602001919060010190620000dd565b5b509050620001479190620001ab565b5090565b82805482825590600052602060002090810192821562000198579160200282015b8281111562000197578251829081620001869190620008d2565b50916020019190600101906200016c565b5b509050620001a79190620001ca565b5090565b5b80821115620001c6576000816000905550600101620001ac565b5090565b5b80821115620001ee5760008181620001e49190620001f2565b50600101620001cb565b5090565b5080546200020090620006c1565b6000825580601f1062000214575062000235565b601f016020900490600052602060002090810190620002349190620001ab565b5b50565b6000604051905090565b600080fd5b600080fd5b600080fd5b6000601f19601f8301169050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b6200029c8262000251565b810181811067ffffffffffffffff82111715620002be57620002bd62000262565b5b80604052505050565b6000620002d362000238565b9050620002e1828262000291565b919050565b600067ffffffffffffffff82111562000304576200030362000262565b5b602082029050602081019050919050565b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b600062000347826200031a565b9050919050565b62000359816200033a565b81146200036557600080fd5b50565b60008151905062000379816200034e565b92915050565b6000620003966200039084620002e6565b620002c7565b90508083825260208201905060208402830185811115620003bc57620003bb62000315565b5b835b81811015620003e95780620003d4888262000368565b845260208401935050602081019050620003be565b5050509392505050565b600082601f8301126200040b576200040a6200024c565b5b81516200041d8482602086016200037f565b91505092915050565b600067ffffffffffffffff82111562000444576200044362000262565b5b602082029050602081019050919050565b600080fd5b600067ffffffffffffffff82111562000478576200047762000262565b5b620004838262000251565b9050602081019050919050565b60005b83811015620004b057808201518184015260208101905062000493565b60008484015250505050565b6000620004d3620004cd846200045a565b620002c7565b905082815260208101848484011115620004f257620004f162000455565b5b620004ff84828562000490565b509392505050565b600082601f8301126200051f576200051e6200024c565b5b815162000531848260208601620004bc565b91505092915050565b6000620005516200054b8462000426565b620002c7565b9050808382526020820190506020840283018581111562000577576200057662000315565b5b835b81811015620005c557805167ffffffffffffffff811115620005a0576200059f6200024c565b5b808601620005af898262000507565b8552602085019450505060208101905062000579565b5050509392505050565b600082601f830112620005e757620005e66200024c565b5b8151620005f98482602086016200053a565b91505092915050565b600080604083850312156200061c576200061b62000242565b5b600083015167ffffffffffffffff8111156200063d576200063c62000247565b5b6200064b85828601620003f3565b925050602083015167ffffffffffffffff8111156200066f576200066e62000247565b5b6200067d85828601620005cf565b9150509250929050565b600081519050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b60006002820490506001821680620006da57607f821691505b602082108103620006f057620006ef62000692565b5b50919050565b60008190508160005260206000209050919050565b60006020601f8301049050919050565b600082821b905092915050565b6000600883026200075a7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff826200071b565b6200076686836200071b565b95508019841693508086168417925050509392505050565b6000819050919050565b6000819050919050565b6000620007b3620007ad620007a7846200077e565b62000788565b6200077e565b9050919050565b6000819050919050565b620007cf8362000792565b620007e7620007de82620007ba565b84845462000728565b825550505050565b600090565b620007fe620007ef565b6200080b818484620007c4565b505050565b5b81811015620008335762000827600082620007f4565b60018101905062000811565b5050565b601f82111562000882576200084c81620006f6565b62000857846200070b565b8101602085101562000867578190505b6200087f62000876856200070b565b83018262000810565b50505b505050565b600082821c905092915050565b6000620008a76000198460080262000887565b1980831691505092915050565b6000620008c2838362000894565b9150826002028217905092915050565b620008dd8262000687565b67ffffffffffffffff811115620008f957620008f862000262565b5b620009058254620006c1565b6200091282828562000837565b600060209050601f8311600181146200094a576000841562000935578287015190505b620009418582620008b4565b865550620009b1565b601f1984166200095a86620006f6565b60005b8281101562000984578489015182556001820191506020850194506020810190506200095d565b86831015620009a45784890151620009a0601f89168262000894565b8355505b6001600288020188555050505b505050505050565b6136c280620009c96000396000f3fe6080604052600436106100705760003560e01c80636a3ed1111161004e5780636a3ed111146100e65780637e1b720d1461010f578063bf20c66e14610138578063f5396c8c1461016157610070565b806330df4b8c1461007557806340884c52146100915780635da6d08c146100bd575b600080fd5b61008f600480360381019061008a9190612254565b61018a565b005b34801561009d57600080fd5b506100a661036a565b6040516100b49291906124d6565b60405180910390f35b3480156100c957600080fd5b506100e460048036038101906100df919061250d565b6104d4565b005b3480156100f257600080fd5b5061010d60048036038101906101089190612569565b610600565b005b34801561011b57600080fd5b506101366004803603810190610131919061265d565b6107ae565b005b34801561014457600080fd5b5061015f600480360381019061015a91906126cc565b610911565b005b34801561016d57600080fd5b50610188600480360381019061018391906127a3565b610f65565b005b823410156101cd576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016101c49061285c565b60405180910390fd5b6040518060c0016040528060065481526020013373ffffffffffffffffffffffffffffffffffffffff1681526020018481526020018381526020018573ffffffffffffffffffffffffffffffffffffffff1681526020018281525060008060065481526020019081526020016000206000820151816000015560208201518160010160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550604082015181600201556060820151816003015560808201518160040160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555060a08201518160050190816102fd9190612a88565b509050506006600081548092919061031490612b89565b91905055507f993273aba8f3ffa2f322e415e681892c5b94cdf8567fcf1f0ebe13dc28fa655a60016006546103499190612bd1565b33858560405161035c9493929190612c23565b60405180910390a150505050565b60608060046005818054806020026020016040519081016040528092919081815260200182805480156103f257602002820191906000526020600020905b8160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190600101908083116103a8575b5050505050915080805480602002602001604051908101604052809291908181526020016000905b828210156104c6578382906000526020600020018054610439906128ab565b80601f0160208091040260200160405190810160405280929190818152602001828054610465906128ab565b80156104b25780601f10610487576101008083540402835291602001916104b2565b820191906000526020600020905b81548152906001019060200180831161049557829003601f168201915b50505050508152602001906001019061041a565b505050509050915091509091565b600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614610564576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161055b90612cda565b60405180910390fd5b6004829080600181540180825580915050600190039060005260206000200160009091909190916101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055506005819080600181540180825580915050600190039060005260206000200160009091909190915090816105fb9190612a88565b505050565b600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614610690576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161068790612cda565b60405180910390fd5b604051806080016040528060075481526020018473ffffffffffffffffffffffffffffffffffffffff168152602001838152602001828152506001600060075481526020019081526020016000206000820151816000015560208201518160010160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555060408201518160020155606082015181600301559050506007600081548092919061075990612b89565b91905055507f97cc68268dcbbd8d53f0ef5540d61904086eb90a195b0ae7605e7440c4c30008600160075461078e9190612bd1565b8484846040516107a19493929190612c23565b60405180910390a1505050565b336040516020016107bf9190612d42565b604051602081830303815290604052805190602001206107de846110c5565b6000015180519060200120146107f357600080fd5b604051806080016040528060075481526020013373ffffffffffffffffffffffffffffffffffffffff168152602001838152602001828152506001600060075481526020019081526020016000206000820151816000015560208201518160010160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055506040820151816002015560608201518160030155905050600760008154809291906108bc90612b89565b91905055507f97cc68268dcbbd8d53f0ef5540d61904086eb90a195b0ae7605e7440c4c3000860016007546108f19190612bd1565b3384846040516109049493929190612c23565b60405180910390a1505050565b6000805b6004805490508110156109b9576004818154811061093657610935612d5d565b5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16036109a657818061099e90612b89565b9250506109b9565b80806109b190612b89565b915050610915565b50600181146109fd576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016109f490612dfe565b60405180910390fd5b6000600287604051610a0f9190612e5a565b90815260200160405180910390206004015414610c0e57600286604051610a369190612e5a565b90815260200160405180910390206007016000815480929190610a5890612b89565b91905055506002600480549050610a6f9190612ea0565b600287604051610a7f9190612e5a565b908152602001604051809103902060070154118015610ad0575060001515600287604051610aad9190612e5a565b908152602001604051809103902060080160009054906101000a900460ff161515145b15610c09576001600287604051610ae79190612e5a565b908152602001604051809103902060080160006101000a81548160ff0219169083151502179055507f31d17827d0e36382ddda6fc1c43a33c730a5da990f3a4d80a058df75cbcb068a868660008089815260200190815260200160002060010160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16600754600160008a815260200190815260200160002060010160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff166000808c815260200190815260200160002060040160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff166000808d8152602001908152602001600020600501604051610c009796959493929190612f8e565b60405180910390a15b610f5d565b6040518061014001604052808781526020016000808881526020019081526020016000206005018054610c40906128ab565b80601f0160208091040260200160405190810160405280929190818152602001828054610c6c906128ab565b8015610cb95780601f10610c8e57610100808354040283529160200191610cb9565b820191906000526020600020905b815481529060010190602001808311610c9c57829003601f168201915b5050505050815260200160008088815260200190815260200160002060010160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020016001600087815260200190815260200160002060010160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200184815260200183815260200160008088815260200190815260200160002060040160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020016001815260200160001515815260200160001515815250600287604051610dea9190612e5a565b90815260200160405180910390206000820151816000019081610e0d9190612a88565b506020820151816001019081610e239190612a88565b5060408201518160020160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555060608201518160030160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055506080820151816004015560a0820151816005015560c08201518160060160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555060e082015181600701556101008201518160080160006101000a81548160ff0219169083151502179055506101208201518160080160016101000a81548160ff0219169083151502179055509050505b505050505050565b60011515600283604051610f799190612e5a565b908152602001604051809103902060080160009054906101000a900460ff16151514610fa457600080fd5b60001515600283604051610fb89190612e5a565b908152602001604051809103902060080160019054906101000a900460ff16151514610fe357600080fd5b3373ffffffffffffffffffffffffffffffffffffffff1660028360405161100a9190612e5a565b908152602001604051809103902060030160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff161461105c57600080fd5b600160028360405161106e9190612e5a565b908152602001604051809103902060080160016101000a81548160ff0219169083151502179055506110c1816002846040516110aa9190612e5a565b908152602001604051809103902060040154611156565b5050565b6110cd61204c565b60008067ffffffffffffffff8111156110e9576110e8612129565b5b6040519080825280601f01601f19166020018201604052801561111b5781602001600182028036833780820191505090505b509050600061113463c33a1cc685846000346001611187565b905060006111418261148e565b905061114c81611616565b9350505050919050565b60006040518060200160405280600081525090506060905061117e6000836000808588611705565b50505050505050565b6060600060f81b866000815181106111a2576111a1612d5d565b5b602001015160f81c60f81b7effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916148061121e5750600160f81b866000815181106111ef576111ee612d5d565b5b602001015160f81c60f81b7effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916145b8061126c5750600260f81b8660008151811061123d5761123c612d5d565b5b602001015160f81c60f81b7effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916145b806112ba5750600360f81b8660008151811061128b5761128a612d5d565b5b602001015160f81c60f81b7effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916145b806113085750600460f81b866000815181106112d9576112d8612d5d565b5b602001015160f81c60f81b7effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916145b611347576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161133e9061307d565b60405180910390fd5b60008073fe0000000000000000000000000000000000000373ffffffffffffffffffffffffffffffffffffffff16898686611383576000611386565b60015b898b8d60405160200161139e96959493929190613101565b6040516020818303038152906040526040516113ba91906131ac565b600060405180830381855af49150503d80600081146113f5576040519150601f19603f3d011682016040523d82523d6000602084013e6113fa565b606091505b509150915060011515821515146040518060400160405280601181526020017f6163746f722063616c6c206661696c65640000000000000000000000000000008152509061147e576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161147591906131c3565b60405180910390fd5b5080925050509695505050505050565b60606000806000848060200190518101906114a991906132a0565b925092509250600067ffffffffffffffff168267ffffffffffffffff160361151457600081511461150f576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016115069061335b565b60405180910390fd5b6115bc565b607167ffffffffffffffff168267ffffffffffffffff1603611579576000815111611574576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161156b906133ed565b60405180910390fd5b6115bb565b60006115ba576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016115b190613459565b60405180910390fd5b5b5b600083146115c9846117f3565b9061160a576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161160191906131c3565b60405180910390fd5b50809350505050919050565b61161e61204c565b600080611634828561186390919063ffffffff16565b80935081925050506002811461164d5761164c613479565b5b61166082856118b290919063ffffffff16565b84600001819450829052505061167f8285611a5c90919063ffffffff16565b6116a75761169682856118b290919063ffffffff16565b8460200181945082905250506116fe565b600067ffffffffffffffff8111156116c2576116c1612129565b5b6040519080825280601f01601f1916602001820160405280156116f45781602001600182028036833780820191505090505b5083602001819052505b5050919050565b6000806000606060008073fe0000000000000000000000000000000000000573ffffffffffffffffffffffffffffffffffffffff168c8c8c8c8c8c604051602001611755969594939291906134a8565b60405160208183030381529060405260405161177191906131ac565b600060405180830381855af49150503d80600081146117ac576040519150601f19603f3d011682016040523d82523d6000602084013e6117b1565b606091505b50915091506000806000838060200190518101906117cf91906132a0565b92509250925084838383985098509850985050505050509650965096509692505050565b606060008212156118335761180f61180a83611ac8565b611ae4565b60405160200161181f919061355c565b60405160208183030381529060405261185c565b61183c82611ae4565b60405160200161184c91906135ca565b6040516020818303038152906040525b9050919050565b6000806000806118738686611bb2565b8167ffffffffffffffff169150809750819350829450505050600460ff168260ff16146118a3576118a2613479565b5b80859350935050509250929050565b606060008060006118c38686611bb2565b8167ffffffffffffffff169150809750819350829450505050600660ff168260ff1614806118f75750600260ff168260ff16145b61190457611903613479565b5b600660ff168260ff160361194d5761191c8686611bb2565b8167ffffffffffffffff169150809750819350829450505050600260ff168260ff161461194c5761194b613479565b5b5b6000818661195b91906135ec565b905060008267ffffffffffffffff81111561197957611978612129565b5b6040519080825280601f01601f1916602001820160405280156119ab5781602001600182028036833780820191505090505b5090506000808890505b83811015611a3e578981815181106119d0576119cf612d5d565b5b602001015160f81c60f81b8383815181106119ee576119ed612d5d565b5b60200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a9053508180611a2890612b89565b9250508080611a3690612b89565b9150506119b5565b50818489611a4c91906135ec565b9650965050505050509250929050565b60007ff600000000000000000000000000000000000000000000000000000000000000838381518110611a9257611a91612d5d565b5b602001015160f81c60f81b7effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff191614905092915050565b600080821215611adb5781600003611add565b815b9050919050565b606060006001611af384611d40565b01905060008167ffffffffffffffff811115611b1257611b11612129565b5b6040519080825280601f01601f191660200182016040528015611b445781602001600182028036833780820191505090505b509050600082602001820190505b600115611ba7578080600190039150507f3031323334353637383961626364656600000000000000000000000000000000600a86061a8153600a8581611b9b57611b9a612e71565b5b04945060008503611b52575b819350505050919050565b600080600080611bc28686611e93565b9050600185611bd191906135ec565b94506000600560e0831660ff16901c90506000601f83169050601c8160ff1610611bfe57611bfd613479565b5b60188160ff161015611c21578181888160ff169150955095509550505050611d39565b60188160ff1603611c76576000611c388989611e93565b9050600188611c4791906135ec565b975060188160ff161015611c5e57611c5d613479565b5b8281898160ff16915096509650965050505050611d39565b60198160ff1603611cb7576000611c8d8989611f0e565b9050600288611c9c91906135ec565b97508281898161ffff16915096509650965050505050611d39565b601a8160ff1603611cfa576000611cce8989611f78565b9050600488611cdd91906135ec565b97508281898163ffffffff16915096509650965050505050611d39565b601b8160ff1614611d0e57611d0d613479565b5b6000611d1a8989611fe2565b9050600888611d2991906135ec565b9750828189965096509650505050505b9250925092565b600080600090507a184f03e93ff9f4daa797ed6e38ed64bf6a1f0100000000000000008310611d9e577a184f03e93ff9f4daa797ed6e38ed64bf6a1f0100000000000000008381611d9457611d93612e71565b5b0492506040810190505b6d04ee2d6d415b85acef81000000008310611ddb576d04ee2d6d415b85acef81000000008381611dd157611dd0612e71565b5b0492506020810190505b662386f26fc100008310611e0a57662386f26fc100008381611e0057611dff612e71565b5b0492506010810190505b6305f5e1008310611e33576305f5e1008381611e2957611e28612e71565b5b0492506008810190505b6127108310611e58576127108381611e4e57611e4d612e71565b5b0492506004810190505b60648310611e7b5760648381611e7157611e70612e71565b5b0492506002810190505b600a8310611e8a576001810190505b80915050919050565b6000600182611ea291906135ec565b83511015611ee5576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611edc9061366c565b60405180910390fd5b828281518110611ef857611ef7612d5d565b5b602001015160f81c60f81b60f81c905092915050565b6000600282611f1d91906135ec565b83511015611f60576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611f579061366c565b60405180910390fd5b60008260200184015190508060f01c91505092915050565b6000600482611f8791906135ec565b83511015611fca576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611fc19061366c565b60405180910390fd5b60008260200184015190508060e01c91505092915050565b6000600882611ff191906135ec565b83511015612034576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161202b9061366c565b60405180910390fd5b60008260200184015190508060c01c91505092915050565b604051806040016040528060608152602001606081525090565b6000604051905090565b600080fd5b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b60006120a58261207a565b9050919050565b6120b58161209a565b81146120c057600080fd5b50565b6000813590506120d2816120ac565b92915050565b6000819050919050565b6120eb816120d8565b81146120f657600080fd5b50565b600081359050612108816120e2565b92915050565b600080fd5b600080fd5b6000601f19601f8301169050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b61216182612118565b810181811067ffffffffffffffff821117156121805761217f612129565b5b80604052505050565b6000612193612066565b905061219f8282612158565b919050565b600067ffffffffffffffff8211156121bf576121be612129565b5b6121c882612118565b9050602081019050919050565b82818337600083830152505050565b60006121f76121f2846121a4565b612189565b90508281526020810184848401111561221357612212612113565b5b61221e8482856121d5565b509392505050565b600082601f83011261223b5761223a61210e565b5b813561224b8482602086016121e4565b91505092915050565b6000806000806080858703121561226e5761226d612070565b5b600061227c878288016120c3565b945050602061228d878288016120f9565b935050604061229e878288016120f9565b925050606085013567ffffffffffffffff8111156122bf576122be612075565b5b6122cb87828801612226565b91505092959194509250565b600081519050919050565b600082825260208201905092915050565b6000819050602082019050919050565b61230c8161209a565b82525050565b600061231e8383612303565b60208301905092915050565b6000602082019050919050565b6000612342826122d7565b61234c81856122e2565b9350612357836122f3565b8060005b8381101561238857815161236f8882612312565b975061237a8361232a565b92505060018101905061235b565b5085935050505092915050565b600081519050919050565b600082825260208201905092915050565b6000819050602082019050919050565b600081519050919050565b600082825260208201905092915050565b60005b838110156123fb5780820151818401526020810190506123e0565b60008484015250505050565b6000612412826123c1565b61241c81856123cc565b935061242c8185602086016123dd565b61243581612118565b840191505092915050565b600061244c8383612407565b905092915050565b6000602082019050919050565b600061246c82612395565b61247681856123a0565b935083602082028501612488856123b1565b8060005b858110156124c457848403895281516124a58582612440565b94506124b083612454565b925060208a0199505060018101905061248c565b50829750879550505050505092915050565b600060408201905081810360008301526124f08185612337565b905081810360208301526125048184612461565b90509392505050565b6000806040838503121561252457612523612070565b5b6000612532858286016120c3565b925050602083013567ffffffffffffffff81111561255357612552612075565b5b61255f85828601612226565b9150509250929050565b60008060006060848603121561258257612581612070565b5b6000612590868287016120c3565b93505060206125a1868287016120f9565b92505060406125b2868287016120f9565b9150509250925092565b600067ffffffffffffffff8211156125d7576125d6612129565b5b6125e082612118565b9050602081019050919050565b60006126006125fb846125bc565b612189565b90508281526020810184848401111561261c5761261b612113565b5b6126278482856121d5565b509392505050565b600082601f8301126126445761264361210e565b5b81356126548482602086016125ed565b91505092915050565b60008060006060848603121561267657612675612070565b5b600084013567ffffffffffffffff81111561269457612693612075565b5b6126a08682870161262f565b93505060206126b1868287016120f9565b92505060406126c2868287016120f9565b9150509250925092565b600080600080600060a086880312156126e8576126e7612070565b5b600086013567ffffffffffffffff81111561270657612705612075565b5b61271288828901612226565b9550506020612723888289016120f9565b9450506040612734888289016120f9565b9350506060612745888289016120f9565b9250506080612756888289016120f9565b9150509295509295909350565b600067ffffffffffffffff82169050919050565b61278081612763565b811461278b57600080fd5b50565b60008135905061279d81612777565b92915050565b600080604083850312156127ba576127b9612070565b5b600083013567ffffffffffffffff8111156127d8576127d7612075565b5b6127e485828601612226565b92505060206127f58582860161278e565b9150509250929050565b600082825260208201905092915050565b7f4e656564206d6f72652066756e64730000000000000000000000000000000000600082015250565b6000612846600f836127ff565b915061285182612810565b602082019050919050565b6000602082019050818103600083015261287581612839565b9050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b600060028204905060018216806128c357607f821691505b6020821081036128d6576128d561287c565b5b50919050565b60008190508160005260206000209050919050565b60006020601f8301049050919050565b600082821b905092915050565b60006008830261293e7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff82612901565b6129488683612901565b95508019841693508086168417925050509392505050565b6000819050919050565b600061298561298061297b846120d8565b612960565b6120d8565b9050919050565b6000819050919050565b61299f8361296a565b6129b36129ab8261298c565b84845461290e565b825550505050565b600090565b6129c86129bb565b6129d3818484612996565b505050565b5b818110156129f7576129ec6000826129c0565b6001810190506129d9565b5050565b601f821115612a3c57612a0d816128dc565b612a16846128f1565b81016020851015612a25578190505b612a39612a31856128f1565b8301826129d8565b50505b505050565b600082821c905092915050565b6000612a5f60001984600802612a41565b1980831691505092915050565b6000612a788383612a4e565b9150826002028217905092915050565b612a91826123c1565b67ffffffffffffffff811115612aaa57612aa9612129565b5b612ab482546128ab565b612abf8282856129fb565b600060209050601f831160018114612af25760008415612ae0578287015190505b612aea8582612a6c565b865550612b52565b601f198416612b00866128dc565b60005b82811015612b2857848901518255600182019150602085019450602081019050612b03565b86831015612b455784890151612b41601f891682612a4e565b8355505b6001600288020188555050505b505050505050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b6000612b94826120d8565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8203612bc657612bc5612b5a565b5b600182019050919050565b6000612bdc826120d8565b9150612be7836120d8565b9250828203905081811115612bff57612bfe612b5a565b5b92915050565b612c0e816120d8565b82525050565b612c1d8161209a565b82525050565b6000608082019050612c386000830187612c05565b612c456020830186612c14565b612c526040830185612c05565b612c5f6060830184612c05565b95945050505050565b7f4f6e6c79206f776e65722063616e2063616c6c20746869732066756e6374696f60008201527f6e00000000000000000000000000000000000000000000000000000000000000602082015250565b6000612cc46021836127ff565b9150612ccf82612c68565b604082019050919050565b60006020820190508181036000830152612cf381612cb7565b9050919050565b60008160601b9050919050565b6000612d1282612cfa565b9050919050565b6000612d2482612d07565b9050919050565b612d3c612d378261209a565b612d19565b82525050565b6000612d4e8284612d2b565b60148201915081905092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b7f4f7261636c65732063616e206f6e6c792063616c6c20746869732066756e637460008201527f696f6e0000000000000000000000000000000000000000000000000000000000602082015250565b6000612de86023836127ff565b9150612df382612d8c565b604082019050919050565b60006020820190508181036000830152612e1781612ddb565b9050919050565b600081905092915050565b6000612e34826123c1565b612e3e8185612e1e565b9350612e4e8185602086016123dd565b80840191505092915050565b6000612e668284612e29565b915081905092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b6000612eab826120d8565b9150612eb6836120d8565b925082612ec657612ec5612e71565b5b828204905092915050565b6000612edc826123c1565b612ee681856127ff565b9350612ef68185602086016123dd565b612eff81612118565b840191505092915050565b60008154612f17816128ab565b612f2181866127ff565b94506001821660008114612f3c5760018114612f5257612f85565b60ff198316865281151560200286019350612f85565b612f5b856128dc565b60005b83811015612f7d57815481890152600182019150602081019050612f5e565b808801955050505b50505092915050565b600060e0820190508181036000830152612fa8818a612ed1565b9050612fb76020830189612c05565b612fc46040830188612c14565b612fd16060830187612c05565b612fde6080830186612c14565b612feb60a0830185612c14565b81810360c0830152612ffd8184612f0a565b905098975050505050505050565b7f6163746f725f6164647265737320616464726573732073686f756c642062652060008201527f627974657320666f726d61740000000000000000000000000000000000000000602082015250565b6000613067602c836127ff565b91506130728261300b565b604082019050919050565b600060208201905081810360008301526130968161305a565b9050919050565b6130a681612763565b82525050565b600081519050919050565b600082825260208201905092915050565b60006130d3826130ac565b6130dd81856130b7565b93506130ed8185602086016123dd565b6130f681612118565b840191505092915050565b600060c082019050613116600083018961309d565b6131236020830188612c05565b613130604083018761309d565b61313d606083018661309d565b818103608083015261314f81856130c8565b905081810360a083015261316381846130c8565b9050979650505050505050565b600081905092915050565b6000613186826130ac565b6131908185613170565b93506131a08185602086016123dd565b80840191505092915050565b60006131b8828461317b565b915081905092915050565b600060208201905081810360008301526131dd8184612ed1565b905092915050565b6000819050919050565b6131f8816131e5565b811461320357600080fd5b50565b600081519050613215816131ef565b92915050565b60008151905061322a81612777565b92915050565b600061324361323e846125bc565b612189565b90508281526020810184848401111561325f5761325e612113565b5b61326a8482856123dd565b509392505050565b600082601f8301126132875761328661210e565b5b8151613297848260208601613230565b91505092915050565b6000806000606084860312156132b9576132b8612070565b5b60006132c786828701613206565b93505060206132d88682870161321b565b925050604084015167ffffffffffffffff8111156132f9576132f8612075565b5b61330586828701613272565b9150509250925092565b7f726573706f6e7365206c656e6774682073686f756c6420626520300000000000600082015250565b6000613345601b836127ff565b91506133508261330f565b602082019050919050565b6000602082019050818103600083015261337481613338565b9050919050565b7f726573706f6e7365206c656e6774682073686f756c642067726561746572207460008201527f68616e2030000000000000000000000000000000000000000000000000000000602082015250565b60006133d76025836127ff565b91506133e28261337b565b604082019050919050565b60006020820190508181036000830152613406816133ca565b9050919050565b7f696e76616c696420726573706f736e6520636f64656300000000000000000000600082015250565b60006134436016836127ff565b915061344e8261340d565b602082019050919050565b6000602082019050818103600083015261347281613436565b9050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052600160045260246000fd5b600060c0820190506134bd600083018961309d565b6134ca6020830188612c05565b6134d7604083018761309d565b6134e4606083018661309d565b81810360808301526134f681856130c8565b905061350560a083018461309d565b979650505050505050565b7f6163746f72206572726f7220636f6465202d0000000000000000000000000000600082015250565b6000613546601283612e1e565b915061355182613510565b601282019050919050565b600061356782613539565b91506135738284612e29565b915081905092915050565b7f6163746f72206572726f7220636f646520000000000000000000000000000000600082015250565b60006135b4601183612e1e565b91506135bf8261357e565b601182019050919050565b60006135d5826135a7565b91506135e18284612e29565b915081905092915050565b60006135f7826120d8565b9150613602836120d8565b925082820190508082111561361a57613619612b5a565b5b92915050565b7f736c6963696e67206f7574206f662072616e6765000000000000000000000000600082015250565b60006136566014836127ff565b915061366182613620565b602082019050919050565b6000602082019050818103600083015261368581613649565b905091905056fea2646970667358221220771f8c2c50f97fd0cc571224269ee3288ade641e40882b62c91ea8351053ff6a64736f6c63430008120033",
}

// OrderbookABI is the input ABI used to generate the binding from.
// Deprecated: Use OrderbookMetaData.ABI instead.
var OrderbookABI = OrderbookMetaData.ABI

// OrderbookBin is the compiled bytecode used for deploying new contracts.
// Deprecated: Use OrderbookMetaData.Bin instead.
var OrderbookBin = OrderbookMetaData.Bin

// DeployOrderbook deploys a new Ethereum contract, binding an instance of Orderbook to it.
func DeployOrderbook(auth *bind.TransactOpts, backend bind.ContractBackend, _oracles []common.Address, _oraclesIP []string) (common.Address, *types.Transaction, *Orderbook, error) {
	parsed, err := OrderbookMetaData.GetAbi()
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	if parsed == nil {
		return common.Address{}, nil, nil, errors.New("GetABI returned nil")
	}

	address, tx, contract, err := bind.DeployContract(auth, *parsed, common.FromHex(OrderbookBin), backend, _oracles, _oraclesIP)
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	return address, tx, &Orderbook{OrderbookCaller: OrderbookCaller{contract: contract}, OrderbookTransactor: OrderbookTransactor{contract: contract}, OrderbookFilterer: OrderbookFilterer{contract: contract}}, nil
}

// Orderbook is an auto generated Go binding around an Ethereum contract.
type Orderbook struct {
	OrderbookCaller     // Read-only binding to the contract
	OrderbookTransactor // Write-only binding to the contract
	OrderbookFilterer   // Log filterer for contract events
}

// OrderbookCaller is an auto generated read-only Go binding around an Ethereum contract.
type OrderbookCaller struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// OrderbookTransactor is an auto generated write-only Go binding around an Ethereum contract.
type OrderbookTransactor struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// OrderbookFilterer is an auto generated log filtering Go binding around an Ethereum contract events.
type OrderbookFilterer struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// OrderbookSession is an auto generated Go binding around an Ethereum contract,
// with pre-set call and transact options.
type OrderbookSession struct {
	Contract     *Orderbook        // Generic contract binding to set the session for
	CallOpts     bind.CallOpts     // Call options to use throughout this session
	TransactOpts bind.TransactOpts // Transaction auth options to use throughout this session
}

// OrderbookCallerSession is an auto generated read-only Go binding around an Ethereum contract,
// with pre-set call options.
type OrderbookCallerSession struct {
	Contract *OrderbookCaller // Generic contract caller binding to set the session for
	CallOpts bind.CallOpts    // Call options to use throughout this session
}

// OrderbookTransactorSession is an auto generated write-only Go binding around an Ethereum contract,
// with pre-set transact options.
type OrderbookTransactorSession struct {
	Contract     *OrderbookTransactor // Generic contract transactor binding to set the session for
	TransactOpts bind.TransactOpts    // Transaction auth options to use throughout this session
}

// OrderbookRaw is an auto generated low-level Go binding around an Ethereum contract.
type OrderbookRaw struct {
	Contract *Orderbook // Generic contract binding to access the raw methods on
}

// OrderbookCallerRaw is an auto generated low-level read-only Go binding around an Ethereum contract.
type OrderbookCallerRaw struct {
	Contract *OrderbookCaller // Generic read-only contract binding to access the raw methods on
}

// OrderbookTransactorRaw is an auto generated low-level write-only Go binding around an Ethereum contract.
type OrderbookTransactorRaw struct {
	Contract *OrderbookTransactor // Generic write-only contract binding to access the raw methods on
}

// NewOrderbook creates a new instance of Orderbook, bound to a specific deployed contract.
func NewOrderbook(address common.Address, backend bind.ContractBackend) (*Orderbook, error) {
	contract, err := bindOrderbook(address, backend, backend, backend)
	if err != nil {
		return nil, err
	}
	return &Orderbook{OrderbookCaller: OrderbookCaller{contract: contract}, OrderbookTransactor: OrderbookTransactor{contract: contract}, OrderbookFilterer: OrderbookFilterer{contract: contract}}, nil
}

// NewOrderbookCaller creates a new read-only instance of Orderbook, bound to a specific deployed contract.
func NewOrderbookCaller(address common.Address, caller bind.ContractCaller) (*OrderbookCaller, error) {
	contract, err := bindOrderbook(address, caller, nil, nil)
	if err != nil {
		return nil, err
	}
	return &OrderbookCaller{contract: contract}, nil
}

// NewOrderbookTransactor creates a new write-only instance of Orderbook, bound to a specific deployed contract.
func NewOrderbookTransactor(address common.Address, transactor bind.ContractTransactor) (*OrderbookTransactor, error) {
	contract, err := bindOrderbook(address, nil, transactor, nil)
	if err != nil {
		return nil, err
	}
	return &OrderbookTransactor{contract: contract}, nil
}

// NewOrderbookFilterer creates a new log filterer instance of Orderbook, bound to a specific deployed contract.
func NewOrderbookFilterer(address common.Address, filterer bind.ContractFilterer) (*OrderbookFilterer, error) {
	contract, err := bindOrderbook(address, nil, nil, filterer)
	if err != nil {
		return nil, err
	}
	return &OrderbookFilterer{contract: contract}, nil
}

// bindOrderbook binds a generic wrapper to an already deployed contract.
func bindOrderbook(address common.Address, caller bind.ContractCaller, transactor bind.ContractTransactor, filterer bind.ContractFilterer) (*bind.BoundContract, error) {
	parsed, err := abi.JSON(strings.NewReader(OrderbookABI))
	if err != nil {
		return nil, err
	}
	return bind.NewBoundContract(address, parsed, caller, transactor, filterer), nil
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_Orderbook *OrderbookRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _Orderbook.Contract.OrderbookCaller.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_Orderbook *OrderbookRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _Orderbook.Contract.OrderbookTransactor.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_Orderbook *OrderbookRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _Orderbook.Contract.OrderbookTransactor.contract.Transact(opts, method, params...)
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_Orderbook *OrderbookCallerRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _Orderbook.Contract.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_Orderbook *OrderbookTransactorRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _Orderbook.Contract.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_Orderbook *OrderbookTransactorRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _Orderbook.Contract.contract.Transact(opts, method, params...)
}

// GetOracles is a free data retrieval call binding the contract method 0x40884c52.
//
// Solidity: function getOracles() view returns(address[], string[])
func (_Orderbook *OrderbookCaller) GetOracles(opts *bind.CallOpts) ([]common.Address, []string, error) {
	var out []interface{}
	err := _Orderbook.contract.Call(opts, &out, "getOracles")

	if err != nil {
		return *new([]common.Address), *new([]string), err
	}

	out0 := *abi.ConvertType(out[0], new([]common.Address)).(*[]common.Address)
	out1 := *abi.ConvertType(out[1], new([]string)).(*[]string)

	return out0, out1, err

}

// GetOracles is a free data retrieval call binding the contract method 0x40884c52.
//
// Solidity: function getOracles() view returns(address[], string[])
func (_Orderbook *OrderbookSession) GetOracles() ([]common.Address, []string, error) {
	return _Orderbook.Contract.GetOracles(&_Orderbook.CallOpts)
}

// GetOracles is a free data retrieval call binding the contract method 0x40884c52.
//
// Solidity: function getOracles() view returns(address[], string[])
func (_Orderbook *OrderbookCallerSession) GetOracles() ([]common.Address, []string, error) {
	return _Orderbook.Contract.GetOracles(&_Orderbook.CallOpts)
}

// AddAsk is a paid mutator transaction binding the contract method 0x7e1b720d.
//
// Solidity: function addAsk(bytes _target, uint256 _askAmount, uint256 _askSize) returns()
func (_Orderbook *OrderbookTransactor) AddAsk(opts *bind.TransactOpts, _target []byte, _askAmount *big.Int, _askSize *big.Int) (*types.Transaction, error) {
	return _Orderbook.contract.Transact(opts, "addAsk", _target, _askAmount, _askSize)
}

// AddAsk is a paid mutator transaction binding the contract method 0x7e1b720d.
//
// Solidity: function addAsk(bytes _target, uint256 _askAmount, uint256 _askSize) returns()
func (_Orderbook *OrderbookSession) AddAsk(_target []byte, _askAmount *big.Int, _askSize *big.Int) (*types.Transaction, error) {
	return _Orderbook.Contract.AddAsk(&_Orderbook.TransactOpts, _target, _askAmount, _askSize)
}

// AddAsk is a paid mutator transaction binding the contract method 0x7e1b720d.
//
// Solidity: function addAsk(bytes _target, uint256 _askAmount, uint256 _askSize) returns()
func (_Orderbook *OrderbookTransactorSession) AddAsk(_target []byte, _askAmount *big.Int, _askSize *big.Int) (*types.Transaction, error) {
	return _Orderbook.Contract.AddAsk(&_Orderbook.TransactOpts, _target, _askAmount, _askSize)
}

// AddBid is a paid mutator transaction binding the contract method 0x30df4b8c.
//
// Solidity: function addBid(address _oracleAddress, uint256 _bidAmount, uint256 _bidSize, string _dataCID) payable returns()
func (_Orderbook *OrderbookTransactor) AddBid(opts *bind.TransactOpts, _oracleAddress common.Address, _bidAmount *big.Int, _bidSize *big.Int, _dataCID string) (*types.Transaction, error) {
	return _Orderbook.contract.Transact(opts, "addBid", _oracleAddress, _bidAmount, _bidSize, _dataCID)
}

// AddBid is a paid mutator transaction binding the contract method 0x30df4b8c.
//
// Solidity: function addBid(address _oracleAddress, uint256 _bidAmount, uint256 _bidSize, string _dataCID) payable returns()
func (_Orderbook *OrderbookSession) AddBid(_oracleAddress common.Address, _bidAmount *big.Int, _bidSize *big.Int, _dataCID string) (*types.Transaction, error) {
	return _Orderbook.Contract.AddBid(&_Orderbook.TransactOpts, _oracleAddress, _bidAmount, _bidSize, _dataCID)
}

// AddBid is a paid mutator transaction binding the contract method 0x30df4b8c.
//
// Solidity: function addBid(address _oracleAddress, uint256 _bidAmount, uint256 _bidSize, string _dataCID) payable returns()
func (_Orderbook *OrderbookTransactorSession) AddBid(_oracleAddress common.Address, _bidAmount *big.Int, _bidSize *big.Int, _dataCID string) (*types.Transaction, error) {
	return _Orderbook.Contract.AddBid(&_Orderbook.TransactOpts, _oracleAddress, _bidAmount, _bidSize, _dataCID)
}

// AddDemoAsks is a paid mutator transaction binding the contract method 0x6a3ed111.
//
// Solidity: function addDemoAsks(address _SPAddress, uint256 _askAmount, uint256 _askSize) returns()
func (_Orderbook *OrderbookTransactor) AddDemoAsks(opts *bind.TransactOpts, _SPAddress common.Address, _askAmount *big.Int, _askSize *big.Int) (*types.Transaction, error) {
	return _Orderbook.contract.Transact(opts, "addDemoAsks", _SPAddress, _askAmount, _askSize)
}

// AddDemoAsks is a paid mutator transaction binding the contract method 0x6a3ed111.
//
// Solidity: function addDemoAsks(address _SPAddress, uint256 _askAmount, uint256 _askSize) returns()
func (_Orderbook *OrderbookSession) AddDemoAsks(_SPAddress common.Address, _askAmount *big.Int, _askSize *big.Int) (*types.Transaction, error) {
	return _Orderbook.Contract.AddDemoAsks(&_Orderbook.TransactOpts, _SPAddress, _askAmount, _askSize)
}

// AddDemoAsks is a paid mutator transaction binding the contract method 0x6a3ed111.
//
// Solidity: function addDemoAsks(address _SPAddress, uint256 _askAmount, uint256 _askSize) returns()
func (_Orderbook *OrderbookTransactorSession) AddDemoAsks(_SPAddress common.Address, _askAmount *big.Int, _askSize *big.Int) (*types.Transaction, error) {
	return _Orderbook.Contract.AddDemoAsks(&_Orderbook.TransactOpts, _SPAddress, _askAmount, _askSize)
}

// AskBounty is a paid mutator transaction binding the contract method 0xf5396c8c.
//
// Solidity: function askBounty(string _orderId, uint64 _actorId) returns()
func (_Orderbook *OrderbookTransactor) AskBounty(opts *bind.TransactOpts, _orderId string, _actorId uint64) (*types.Transaction, error) {
	return _Orderbook.contract.Transact(opts, "askBounty", _orderId, _actorId)
}

// AskBounty is a paid mutator transaction binding the contract method 0xf5396c8c.
//
// Solidity: function askBounty(string _orderId, uint64 _actorId) returns()
func (_Orderbook *OrderbookSession) AskBounty(_orderId string, _actorId uint64) (*types.Transaction, error) {
	return _Orderbook.Contract.AskBounty(&_Orderbook.TransactOpts, _orderId, _actorId)
}

// AskBounty is a paid mutator transaction binding the contract method 0xf5396c8c.
//
// Solidity: function askBounty(string _orderId, uint64 _actorId) returns()
func (_Orderbook *OrderbookTransactorSession) AskBounty(_orderId string, _actorId uint64) (*types.Transaction, error) {
	return _Orderbook.Contract.AskBounty(&_Orderbook.TransactOpts, _orderId, _actorId)
}

// ProveOrder is a paid mutator transaction binding the contract method 0xbf20c66e.
//
// Solidity: function proveOrder(string _orderId, uint256 _bidId, uint256 _askId, uint256 _amountFixed, uint256 _sizeFixed) returns()
func (_Orderbook *OrderbookTransactor) ProveOrder(opts *bind.TransactOpts, _orderId string, _bidId *big.Int, _askId *big.Int, _amountFixed *big.Int, _sizeFixed *big.Int) (*types.Transaction, error) {
	return _Orderbook.contract.Transact(opts, "proveOrder", _orderId, _bidId, _askId, _amountFixed, _sizeFixed)
}

// ProveOrder is a paid mutator transaction binding the contract method 0xbf20c66e.
//
// Solidity: function proveOrder(string _orderId, uint256 _bidId, uint256 _askId, uint256 _amountFixed, uint256 _sizeFixed) returns()
func (_Orderbook *OrderbookSession) ProveOrder(_orderId string, _bidId *big.Int, _askId *big.Int, _amountFixed *big.Int, _sizeFixed *big.Int) (*types.Transaction, error) {
	return _Orderbook.Contract.ProveOrder(&_Orderbook.TransactOpts, _orderId, _bidId, _askId, _amountFixed, _sizeFixed)
}

// ProveOrder is a paid mutator transaction binding the contract method 0xbf20c66e.
//
// Solidity: function proveOrder(string _orderId, uint256 _bidId, uint256 _askId, uint256 _amountFixed, uint256 _sizeFixed) returns()
func (_Orderbook *OrderbookTransactorSession) ProveOrder(_orderId string, _bidId *big.Int, _askId *big.Int, _amountFixed *big.Int, _sizeFixed *big.Int) (*types.Transaction, error) {
	return _Orderbook.Contract.ProveOrder(&_Orderbook.TransactOpts, _orderId, _bidId, _askId, _amountFixed, _sizeFixed)
}

// RegisterOracle is a paid mutator transaction binding the contract method 0x5da6d08c.
//
// Solidity: function registerOracle(address _oracle, string _oracleIP) returns()
func (_Orderbook *OrderbookTransactor) RegisterOracle(opts *bind.TransactOpts, _oracle common.Address, _oracleIP string) (*types.Transaction, error) {
	return _Orderbook.contract.Transact(opts, "registerOracle", _oracle, _oracleIP)
}

// RegisterOracle is a paid mutator transaction binding the contract method 0x5da6d08c.
//
// Solidity: function registerOracle(address _oracle, string _oracleIP) returns()
func (_Orderbook *OrderbookSession) RegisterOracle(_oracle common.Address, _oracleIP string) (*types.Transaction, error) {
	return _Orderbook.Contract.RegisterOracle(&_Orderbook.TransactOpts, _oracle, _oracleIP)
}

// RegisterOracle is a paid mutator transaction binding the contract method 0x5da6d08c.
//
// Solidity: function registerOracle(address _oracle, string _oracleIP) returns()
func (_Orderbook *OrderbookTransactorSession) RegisterOracle(_oracle common.Address, _oracleIP string) (*types.Transaction, error) {
	return _Orderbook.Contract.RegisterOracle(&_Orderbook.TransactOpts, _oracle, _oracleIP)
}

// OrderbookNewAskEventIterator is returned from FilterNewAskEvent and is used to iterate over the raw logs and unpacked data for NewAskEvent events raised by the Orderbook contract.
type OrderbookNewAskEventIterator struct {
	Event *OrderbookNewAskEvent // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *OrderbookNewAskEventIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(OrderbookNewAskEvent)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(OrderbookNewAskEvent)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *OrderbookNewAskEventIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *OrderbookNewAskEventIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// OrderbookNewAskEvent represents a NewAskEvent event raised by the Orderbook contract.
type OrderbookNewAskEvent struct {
	AskId     *big.Int
	Asker     common.Address
	AskAmount *big.Int
	AskSize   *big.Int
	Raw       types.Log // Blockchain specific contextual infos
}

// FilterNewAskEvent is a free log retrieval operation binding the contract event 0x97cc68268dcbbd8d53f0ef5540d61904086eb90a195b0ae7605e7440c4c30008.
//
// Solidity: event NewAskEvent(uint256 askId, address asker, uint256 askAmount, uint256 askSize)
func (_Orderbook *OrderbookFilterer) FilterNewAskEvent(opts *bind.FilterOpts) (*OrderbookNewAskEventIterator, error) {

	logs, sub, err := _Orderbook.contract.FilterLogs(opts, "NewAskEvent")
	if err != nil {
		return nil, err
	}
	return &OrderbookNewAskEventIterator{contract: _Orderbook.contract, event: "NewAskEvent", logs: logs, sub: sub}, nil
}

// WatchNewAskEvent is a free log subscription operation binding the contract event 0x97cc68268dcbbd8d53f0ef5540d61904086eb90a195b0ae7605e7440c4c30008.
//
// Solidity: event NewAskEvent(uint256 askId, address asker, uint256 askAmount, uint256 askSize)
func (_Orderbook *OrderbookFilterer) WatchNewAskEvent(opts *bind.WatchOpts, sink chan<- *OrderbookNewAskEvent) (event.Subscription, error) {

	logs, sub, err := _Orderbook.contract.WatchLogs(opts, "NewAskEvent")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(OrderbookNewAskEvent)
				if err := _Orderbook.contract.UnpackLog(event, "NewAskEvent", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseNewAskEvent is a log parse operation binding the contract event 0x97cc68268dcbbd8d53f0ef5540d61904086eb90a195b0ae7605e7440c4c30008.
//
// Solidity: event NewAskEvent(uint256 askId, address asker, uint256 askAmount, uint256 askSize)
func (_Orderbook *OrderbookFilterer) ParseNewAskEvent(log types.Log) (*OrderbookNewAskEvent, error) {
	event := new(OrderbookNewAskEvent)
	if err := _Orderbook.contract.UnpackLog(event, "NewAskEvent", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// OrderbookNewBidEventIterator is returned from FilterNewBidEvent and is used to iterate over the raw logs and unpacked data for NewBidEvent events raised by the Orderbook contract.
type OrderbookNewBidEventIterator struct {
	Event *OrderbookNewBidEvent // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *OrderbookNewBidEventIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(OrderbookNewBidEvent)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(OrderbookNewBidEvent)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *OrderbookNewBidEventIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *OrderbookNewBidEventIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// OrderbookNewBidEvent represents a NewBidEvent event raised by the Orderbook contract.
type OrderbookNewBidEvent struct {
	BidId     *big.Int
	Bidder    common.Address
	BidAmount *big.Int
	BidSize   *big.Int
	Raw       types.Log // Blockchain specific contextual infos
}

// FilterNewBidEvent is a free log retrieval operation binding the contract event 0x993273aba8f3ffa2f322e415e681892c5b94cdf8567fcf1f0ebe13dc28fa655a.
//
// Solidity: event NewBidEvent(uint256 bidId, address bidder, uint256 bidAmount, uint256 bidSize)
func (_Orderbook *OrderbookFilterer) FilterNewBidEvent(opts *bind.FilterOpts) (*OrderbookNewBidEventIterator, error) {

	logs, sub, err := _Orderbook.contract.FilterLogs(opts, "NewBidEvent")
	if err != nil {
		return nil, err
	}
	return &OrderbookNewBidEventIterator{contract: _Orderbook.contract, event: "NewBidEvent", logs: logs, sub: sub}, nil
}

// WatchNewBidEvent is a free log subscription operation binding the contract event 0x993273aba8f3ffa2f322e415e681892c5b94cdf8567fcf1f0ebe13dc28fa655a.
//
// Solidity: event NewBidEvent(uint256 bidId, address bidder, uint256 bidAmount, uint256 bidSize)
func (_Orderbook *OrderbookFilterer) WatchNewBidEvent(opts *bind.WatchOpts, sink chan<- *OrderbookNewBidEvent) (event.Subscription, error) {

	logs, sub, err := _Orderbook.contract.WatchLogs(opts, "NewBidEvent")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(OrderbookNewBidEvent)
				if err := _Orderbook.contract.UnpackLog(event, "NewBidEvent", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseNewBidEvent is a log parse operation binding the contract event 0x993273aba8f3ffa2f322e415e681892c5b94cdf8567fcf1f0ebe13dc28fa655a.
//
// Solidity: event NewBidEvent(uint256 bidId, address bidder, uint256 bidAmount, uint256 bidSize)
func (_Orderbook *OrderbookFilterer) ParseNewBidEvent(log types.Log) (*OrderbookNewBidEvent, error) {
	event := new(OrderbookNewBidEvent)
	if err := _Orderbook.contract.UnpackLog(event, "NewBidEvent", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// OrderbookOrderCreatedEventIterator is returned from FilterOrderCreatedEvent and is used to iterate over the raw logs and unpacked data for OrderCreatedEvent events raised by the Orderbook contract.
type OrderbookOrderCreatedEventIterator struct {
	Event *OrderbookOrderCreatedEvent // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *OrderbookOrderCreatedEventIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(OrderbookOrderCreatedEvent)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(OrderbookOrderCreatedEvent)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *OrderbookOrderCreatedEventIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *OrderbookOrderCreatedEventIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// OrderbookOrderCreatedEvent represents a OrderCreatedEvent event raised by the Orderbook contract.
type OrderbookOrderCreatedEvent struct {
	OrderId       string
	BidId         *big.Int
	Bidder        common.Address
	AskId         *big.Int
	Asker         common.Address
	OracleAddress common.Address
	DataCID       string
	Raw           types.Log // Blockchain specific contextual infos
}

// FilterOrderCreatedEvent is a free log retrieval operation binding the contract event 0x31d17827d0e36382ddda6fc1c43a33c730a5da990f3a4d80a058df75cbcb068a.
//
// Solidity: event orderCreatedEvent(string orderId, uint256 bidId, address bidder, uint256 askId, address asker, address oracleAddress, string dataCID)
func (_Orderbook *OrderbookFilterer) FilterOrderCreatedEvent(opts *bind.FilterOpts) (*OrderbookOrderCreatedEventIterator, error) {

	logs, sub, err := _Orderbook.contract.FilterLogs(opts, "orderCreatedEvent")
	if err != nil {
		return nil, err
	}
	return &OrderbookOrderCreatedEventIterator{contract: _Orderbook.contract, event: "orderCreatedEvent", logs: logs, sub: sub}, nil
}

// WatchOrderCreatedEvent is a free log subscription operation binding the contract event 0x31d17827d0e36382ddda6fc1c43a33c730a5da990f3a4d80a058df75cbcb068a.
//
// Solidity: event orderCreatedEvent(string orderId, uint256 bidId, address bidder, uint256 askId, address asker, address oracleAddress, string dataCID)
func (_Orderbook *OrderbookFilterer) WatchOrderCreatedEvent(opts *bind.WatchOpts, sink chan<- *OrderbookOrderCreatedEvent) (event.Subscription, error) {

	logs, sub, err := _Orderbook.contract.WatchLogs(opts, "orderCreatedEvent")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(OrderbookOrderCreatedEvent)
				if err := _Orderbook.contract.UnpackLog(event, "orderCreatedEvent", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseOrderCreatedEvent is a log parse operation binding the contract event 0x31d17827d0e36382ddda6fc1c43a33c730a5da990f3a4d80a058df75cbcb068a.
//
// Solidity: event orderCreatedEvent(string orderId, uint256 bidId, address bidder, uint256 askId, address asker, address oracleAddress, string dataCID)
func (_Orderbook *OrderbookFilterer) ParseOrderCreatedEvent(log types.Log) (*OrderbookOrderCreatedEvent, error) {
	event := new(OrderbookOrderCreatedEvent)
	if err := _Orderbook.contract.UnpackLog(event, "orderCreatedEvent", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}
